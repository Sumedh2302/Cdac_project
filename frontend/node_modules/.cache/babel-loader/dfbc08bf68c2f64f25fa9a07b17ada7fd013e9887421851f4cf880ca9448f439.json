{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000\n});\nexport const searchApi = {\n  search: async (query, page = 0, pageSize = 10) => {\n    try {\n      const response = await api.get('/search', {\n        params: {\n          query,\n          page,\n          pageSize\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Search error:', error);\n      throw error;\n    }\n  },\n  autoComplete: async query => {\n    try {\n      const response = await api.get('/autoComplete', {\n        params: {\n          query\n        }\n      });\n      // Parse the response as a JSON array and extract phrases\n      let suggestions = [];\n      if (typeof response.data === 'string') {\n        try {\n          const arr = JSON.parse(response.data);\n          if (Array.isArray(arr)) {\n            suggestions = arr.map(item => item.phrase).filter(Boolean);\n          }\n        } catch (e) {\n          // Not a JSON array, ignore\n        }\n      } else if (Array.isArray(response.data)) {\n        suggestions = response.data.map(item => item.phrase).filter(Boolean);\n      }\n      return suggestions;\n    } catch (error) {\n      console.error('Autocomplete error:', error);\n      throw error;\n    }\n  },\n  getInstantAnswer: async query => {\n    try {\n      const response = await api.get('/search/ddg-instant', {\n        params: {\n          query\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      if (axios.isAxiosError(error) && ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 204) {\n        return null; // No content available\n      }\n      console.error('Instant answer error:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","searchApi","search","query","page","pageSize","response","get","params","data","error","console","autoComplete","suggestions","arr","JSON","parse","Array","isArray","map","item","phrase","filter","Boolean","e","getInstantAnswer","_error$response","isAxiosError","status"],"sources":["E:/Web-Search-Engine-main/search-api-cached2/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000,\r\n});\r\n\r\nexport const searchApi = {\r\n  search: async (query, page = 0, pageSize = 10) => {\r\n    try {\r\n      const response = await api.get('/search', {\r\n        params: { query, page, pageSize }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Search error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  autoComplete: async (query) => {\r\n    try {\r\n      const response = await api.get('/autoComplete', {\r\n        params: { query }\r\n      });\r\n      // Parse the response as a JSON array and extract phrases\r\n      let suggestions = [];\r\n      if (typeof response.data === 'string') {\r\n        try {\r\n          const arr = JSON.parse(response.data);\r\n          if (Array.isArray(arr)) {\r\n            suggestions = arr.map(item => item.phrase).filter(Boolean);\r\n          }\r\n        } catch (e) {\r\n          // Not a JSON array, ignore\r\n        }\r\n      } else if (Array.isArray(response.data)) {\r\n        suggestions = response.data.map(item => item.phrase).filter(Boolean);\r\n      }\r\n      return suggestions;\r\n    } catch (error) {\r\n      console.error('Autocomplete error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getInstantAnswer: async (query) => {\r\n    try {\r\n      const response = await api.get('/search/ddg-instant', {\r\n        params: { query }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      if (axios.isAxiosError(error) && error.response?.status === 204) {\r\n        return null; // No content available\r\n      }\r\n      console.error('Instant answer error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,OAAO,MAAMC,SAAS,GAAG;EACvBC,MAAM,EAAE,MAAAA,CAAOC,KAAK,EAAEC,IAAI,GAAG,CAAC,EAAEC,QAAQ,GAAG,EAAE,KAAK;IAChD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMT,GAAG,CAACU,GAAG,CAAC,SAAS,EAAE;QACxCC,MAAM,EAAE;UAAEL,KAAK;UAAEC,IAAI;UAAEC;QAAS;MAClC,CAAC,CAAC;MACF,OAAOC,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC,MAAMA,KAAK;IACb;EACF,CAAC;EAEDE,YAAY,EAAE,MAAOT,KAAK,IAAK;IAC7B,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMT,GAAG,CAACU,GAAG,CAAC,eAAe,EAAE;QAC9CC,MAAM,EAAE;UAAEL;QAAM;MAClB,CAAC,CAAC;MACF;MACA,IAAIU,WAAW,GAAG,EAAE;MACpB,IAAI,OAAOP,QAAQ,CAACG,IAAI,KAAK,QAAQ,EAAE;QACrC,IAAI;UACF,MAAMK,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACV,QAAQ,CAACG,IAAI,CAAC;UACrC,IAAIQ,KAAK,CAACC,OAAO,CAACJ,GAAG,CAAC,EAAE;YACtBD,WAAW,GAAGC,GAAG,CAACK,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,MAAM,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC;UAC5D;QACF,CAAC,CAAC,OAAOC,CAAC,EAAE;UACV;QAAA;MAEJ,CAAC,MAAM,IAAIP,KAAK,CAACC,OAAO,CAACZ,QAAQ,CAACG,IAAI,CAAC,EAAE;QACvCI,WAAW,GAAGP,QAAQ,CAACG,IAAI,CAACU,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,MAAM,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC;MACtE;MACA,OAAOV,WAAW;IACpB,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACb;EACF,CAAC;EAEDe,gBAAgB,EAAE,MAAOtB,KAAK,IAAK;IACjC,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMT,GAAG,CAACU,GAAG,CAAC,qBAAqB,EAAE;QACpDC,MAAM,EAAE;UAAEL;QAAM;MAClB,CAAC,CAAC;MACF,OAAOG,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAgB,eAAA;MACd,IAAIlC,KAAK,CAACmC,YAAY,CAACjB,KAAK,CAAC,IAAI,EAAAgB,eAAA,GAAAhB,KAAK,CAACJ,QAAQ,cAAAoB,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,EAAE;QAC/D,OAAO,IAAI,CAAC,CAAC;MACf;MACAjB,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}